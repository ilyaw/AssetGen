import Foundation
import Commander
import PathKit

func discoverXcassetsInDirectory(path: String) -> [Path] {
	let contents = try! Path(path).recursiveChildren()
	let xcassets = contents.filterByExtension("xcassets")
	return xcassets
}

func assetsInCatalog(path: Path) -> XCAssets {
	let children = try! path.children()
	let imagesets = children.filterByExtension("imageset")

	var lookup = [String : String]()
	for imageset in imagesets {
		let name = imageset.lastComponentWithoutExtension
		lookup[name.titlecaseString()] = name
	}

	let subfolders = children.filter({ $0.`extension` == nil }).map(assetsInCatalog)

	let assets = XCAssets(name: path.lastComponentWithoutExtension.titlecaseString(), cases: lookup, subfolders: subfolders)
	return assets
}

func generateSourceForCatalog(path: Path) -> [String] {
	return assetsInCatalog(path).source
}

let main = command(
				   Option("input", ".", description: "Path to the input directory"),
				   Option("output", "Assets.swift", description: "Path to the output swift file"),
				   Flag("verbose")
				   )
{ input, output, verbose in
	if verbose { print("Looking for xcassets recursively in path: ", input) }
	let sources = discoverXcassetsInDirectory(input).map(generateSourceForCatalog).reduce([String](), combine: +)
	var source = [
		"// Generated by AssetGen.swift",
		"import UIKit",
		"protocol AssetGenImageProtocol: RawRepresentable {",
		"    var image: UIImage { get }",
		"}",
		"",
		"extension AssetGenImageProtocol where RawValue == String {",
		"    var image: UIImage {",
		"        return UIImage(named: rawValue)!",
		"    }",
		"}",
		"",
		"struct ImageResources {"
	]
	source.appendContentsOf(sources)
	source.append("}\n")
	let sourceText = source.joinWithSeparator("\n")

	try! sourceText.writeToFile(output, atomically: true, encoding: NSUTF8StringEncoding)
}

main.run()
